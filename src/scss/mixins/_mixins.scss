@mixin border-radius($radius) {
-webkit-border-radius: $radius;
-moz-border-radius: $radius;
-ms-border-radius: $radius;
border-radius: $radius;
}

@mixin linearGradient($top, $bottom){
    background: $top; /* Old browsers */
    background: -moz-linear-gradient(top,  $top 0%, $bottom 100%); /* FF3.6+ */
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$top), color-stop(100%,$bottom)); /* Chrome,Safari4+ */
    background: -webkit-linear-gradient(top,  $top 0%,$bottom 100%); /* Chrome10+,Safari5.1+ */
    background: -o-linear-gradient(top,  $top 0%,$bottom 100%); /* Opera 11.10+ */
    background: -ms-linear-gradient(top,  $top 0%,$bottom 100%); /* IE10+ */
    background: linear-gradient(to bottom,  $top 0%,$bottom 100%); /* W3C */
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#ffffff', endColorstr='#000000',GradientType=0 ); /* IE6-9 */
}

// Box shadow
@mixin box-shadow($shadow) {
    -webkit-box-shadow: $shadow;
    -moz-box-shadow: $shadow;
    box-shadow: $shadow;
}

// Bron: https://css-tricks.com/snippets/sass/strip-unit-function/
/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }
    @return $number;
}

// Rem output with px fallback
@mixin font-size($sizeValue: 1, $important: null) {
    @if type-of($important) == 'bool' {
        @if $important == true {
            $important: !important;
        }
        @else {
            $important: null;
        }
    }
    // px input
    @if unit($sizeValue) == 'px' {
        font-size: $sizeValue $important;
        font-size: strip-unit(percentage($sizeValue / $font-size-base) / 100) * 1rem $important;
    }
    // rem input
    @else if unitless($sizeValue) {
        font-size: ceil($sizeValue * strip-unit($font-size-base)) * 1px $important;
        font-size: $sizeValue * 1rem $important;
    }
    // Fallthrough
    @else {
        $unit: unit($sizeValue);
        @warn 'Mixin font-size() ondersteund geen `#{$unit}`, opgegeven unit: #{$sizeValue}';
        font-size: $sizeValue $important;
    }
}

// Center block
@mixin center-block {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

// Clearfix
@mixin clearfix() {
    content: "";
    display: table;
    table-layout: fixed;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
    clear: both;
}

@mixin columns($columns) {
    -moz-columns: $columns;
    -webkit-columns: $columns;
    columns: $columns;
}

@mixin list-reset() {
    padding:0;
    margin:0;
    list-style:none;
}

@mixin animation-speed($duration, $delay) {
    -moz-animation-duration: $duration;
    -moz-animation-delay: $delay;
    -webkit-animation-duration: $duration;
    -webkit-animation-delay: $delay;
    -o-animation-delay: $delay;
    animation-duration: $duration;
    animation-delay: $delay;
}

@mixin transition($transition) {
    -webkit-transition: $transition;
    -moz-transition: $transition;
    -o-transition: $transition;
    transition: $transition;
}

@import 'flex'